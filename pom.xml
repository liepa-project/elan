<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!-- this project -->
    <groupId>nl.mpi</groupId>
    <artifactId>elan</artifactId>
    <version>6.9</version>
    <packaging>jar</packaging>
    <name>ELAN Multimedia Annotator</name>
    <organization>
        <name>Max Planck Institute for Psycholinguistics - The Language Archive</name>
        <url>https://archive.mpi.nl/tla/elan</url>
    </organization>
    <description>
        The following tasks or targets are supported:
        Compiling the source tree:
        mvn compile

        Creating a jar (also copies required jar files to target/lib):
        mvn package

        This also launches the application. For creating the jar without launching:
        mvn package -Dexec.phase=install
        or
        mvn package -P !win (or -P -mac or -P -linux)

        Running ELAN:
        mvn test

        Running without (re)building:
		mvn exec:exec

        In the TLA/MPI context there is also a target for creating the source distribution:
        mvn test -P source -P !win (or -P -mac or -P -linux)
    </description>
    <scm>
        <developerConnection>scm:git:https://gitlab.gwdg.de/mpipl-annotation/elan</developerConnection>
    </scm>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<project.build.sourceLevel>21</project.build.sourceLevel>
		<project.build.targetLevel>21</project.build.targetLevel>

		<maven.compiler.source>21</maven.compiler.source>
    	<maven.compiler.target>21</maven.compiler.target>
        <!-- and/or specify the targeted java version  -->
        <!-- <maven.compiler.release>11</maven.compiler.release> -->


        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss</maven.build.timestamp.format>
        <nativelib.dir>nativelib</nativelib.dir>
        <!-- for running ELAN before or after the package phase -->
        <!-- integration-test with jar or prepare-package to execute without creating a jar -->
        <exec.phase>test</exec.phase>
        <httpcomponents.version>4.5.13</httpcomponents.version>
        <recognizer-api.version>4.1</recognizer-api.version>
        <!-- a qualifier property to indicate the architecture for which the native libraries should be fetched -->
        <!-- this concerns macOS: leave empty for x86_64 (default), use '-a64' for Apple M1/aarch64/arm64 -->
        <mac-arch-qualifier>-a64</mac-arch-qualifier>
        <spotbugs.include.filter.file>spotbugs-include.xml</spotbugs.include.filter.file>
    </properties>
    <!-- dependencies, jars -->
    <dependencies>
        <dependency>
            <groupId>xerces</groupId>
            <artifactId>xercesImpl</artifactId>
            <version>2.11.0</version>
            <!-- version 2.11 contains packages that are in (newer) jdk modules (split package)
                 test 2.12.x ? (not in Maven repository) -->
            <exclusions>
                <exclusion>
                    <groupId>xml-apis</groupId>
                    <artifactId>xml-apis</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>xalan</groupId>
            <artifactId>xalan</artifactId>
            <version>2.4.1</version>
            <!-- version 2.4.1 contains packages that are in (newer) jdk modules (split package)
                 test 2.7.2 ?-->
        </dependency>
        <dependency>
            <groupId>javax.help</groupId>
            <artifactId>jhall</artifactId>
            <version>2.0.05</version>
        </dependency>
        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>2.7.2</version>
        </dependency>
        <dependency>
            <groupId>javax.graphics</groupId>
            <artifactId>jlfgr</artifactId>
            <version>1.0</version>
        </dependency>
        <dependency>
            <groupId>uk.gate</groupId>
            <artifactId>guk</artifactId>
            <version>0.7</version>
        </dependency>
        <!--
        <dependency>
            <groupId>com.apple</groupId>
            <artifactId>AppleJavaExtensions</artifactId>
            <version>1.0</version>
            <scope>compile</scope>
        </dependency>
          -->
        <dependency>
            <groupId>nl.mpi.annot.search</groupId>
            <artifactId>mfsearch</artifactId>
            <version>1.8</version>
            <exclusions>
                <exclusion>
                    <groupId>nl.mpi</groupId>
                    <artifactId>elan4annex</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <!-- This is really a dependency of mfsearch and annot-search-lib -->
            <groupId>nl.mpi.annot</groupId>
            <artifactId>annot-tools</artifactId>
            <version>1.3</version>
        </dependency>
        <dependency>
            <!-- This is really a dependency of mfsearch   -->
            <groupId>nl.mpi.annot.search</groupId>
            <artifactId>annot-search-lib</artifactId>
            <version>1.8</version>
        </dependency>
        <dependency>
            <groupId>nl.mpi.lexan</groupId>
            <artifactId>lexan-api</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>nl.mpi</groupId>
            <artifactId>lexiconcomponent</artifactId>
            <version>1.9</version>
        </dependency>
        <!-- For the VLCJMediaPlayer -->
        <dependency>
            <groupId>uk.co.caprica</groupId>
            <artifactId>vlcj</artifactId>
            <version>4.2.0</version>
        </dependency>
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna</artifactId>
            <version>5.12.1</version>
        </dependency>
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna-platform</artifactId>
            <version>5.12.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.4.14</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.13</version>
        </dependency>
        <!-- Staccato dependency -->
        <dependency>
            <groupId>de.saga</groupId>
            <artifactId>staccato</artifactId>
            <version>1.0.0</version>
        </dependency>
        <!-- Dasish annotation schema dependency -->
        <dependency>
            <groupId>eu.dasish</groupId>
            <artifactId>annotation-schema</artifactId>
            <version>1.0</version>
        </dependency>

        <!-- nl.mpi.im.gim-0.4 nl.mpi.im.lookup.CJKV-0.3, nl.mpi.im.lookup.IPA-0.4,
            nl.mpi.im.lookup-0.9 -->
        <dependency>
            <groupId>com.gitlab.dumonts</groupId>
            <artifactId>hunspell</artifactId>
            <version>2.1.2</version>
        </dependency>

        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20160212</version>
        </dependency>
        <!--
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.5</version>
        </dependency>
         -->
        <!-- JAXB no longer part of the JRE in Java 10 or higher, now part of EE4j project,
             pulls in several jars the following libraries depend on -->
        <!-- API -->
        <!--
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <version>2.3.2</version>
        </dependency>
        -->
        <!-- Runtime in the GlassFish project-->
        <!--
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>2.3.2</version>
        </dependency>
         -->
        <!-- JAXB needs javax/activation ? -->
        <!--
        <dependency>
              <groupId>jakarta.activation</groupId>
              <artifactId>jakarta.activation-api</artifactId>
              <version>1.2.1</version>
        </dependency>
         -->
        <!-- "old" implementation of JAXB to be used for now, runtime jars added outside of Maven -->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.3.1</version>
        </dependency>
        <!-- JAXB needs javax/activation -->
        <dependency>
            <groupId>javax.activation</groupId>
            <artifactId>activation</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-impl</artifactId>
            <version>2.3.0.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-core</artifactId>
            <version>2.3.0.1</version>
        </dependency>
        <!-- end "old" JAXB -->
        <!-- JavaFX removed from JDK/JRE in Java 10 -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>18.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-media</artifactId>
            <version>18.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-swing</artifactId>
            <version>18.0.1</version>
        </dependency>
        <dependency>
            <groupId>nl.mpi.im</groupId>
            <artifactId>gim</artifactId>
            <version>0.4</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>nl.mpi.im.lookup</groupId>
            <artifactId>CJKV</artifactId>
            <version>0.3</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>nl.mpi.im.lookup</groupId>
            <artifactId>IPA</artifactId>
            <version>0.4</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>5.3.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!-- build -->
    <build>
        <plugins>
            <!-- General compiler settings (sourcelevel, targetlevel and source encoding) -->
            <!-- default phase:compiler, goal:compile -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <source>${project.build.sourceLevel}</source>
                    <target>${project.build.targetLevel}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>

                    <fork>true</fork>
                    <meminitial>128m</meminitial>
                    <maxmem>512m</maxmem>
                    <excludes>
                    <!-- 
                        <exclude>nl/mpi/recognizer/**</exclude>
                    -->
                    </excludes>
                    <!-- compiler arguments -->
                    <compilerArguments>
                        <verbose />
                    </compilerArguments>
                    <!-- or <compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument> -->
                </configuration>
            </plugin>
            <!-- packaging, creating a jar -->
            <!-- default phase:package, goal:jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.3.1</version>
                <executions>
                    <execution>
                        <id>default-jar</id>
                        <configuration>
                            <archive>
                                <index>false</index>
                                <manifest>
                                    <addClasspath>true</addClasspath>
                                    <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                                </manifest>
                                <manifestEntries>
                                    <Built-On>${maven.build.timestamp}</Built-On>
                                </manifestEntries>
                            </archive>
                            <excludes>
                                <!-- see recognizer-jar execution: the included files there should be excluded here
                                 (they probably shouldn't be in the same "module") -->
                                 <exclude>nl/mpi/recognizer/**</exclude>
                                <exclude>mpi/eudico/server/corpora/clomimpl/textconversion/**</exclude>
                                <exclude>${project.build.directory}/${nativelib.dir}</exclude>
                            </excludes>

                        </configuration>
                    </execution>
                    <execution>
                        <!-- Create a jar containing the classes that build the Recognizer API -->
                        <id>recognizer-jar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <finalName>recognizer-api-${recognizer-api.version}</finalName>
                            <classifier>recognizer-api</classifier>
                            <includes>
                                <include>mpi/eudico/client/annotator/recognizer/api/**</include>
                                <include>mpi/eudico/client/annotator/recognizer/data/**</include>
                            </includes>
                            <excludes>
                                <!-- these classes should actually be moved to a different package -->
                                <exclude>mpi/eudico/client/annotator/recognizer/api/LocalRecognizer*</exclude>
                                <exclude>mpi/eudico/client/annotator/recognizer/api/SharedRecognizer*</exclude>
                                <exclude>mpi/eudico/client/annotator/recognizer/api/RecogAvailabilityDetector*</exclude>
                                <exclude>mpi/eudico/client/annotator/recognizer/data/**Param.*</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.2.1</version>
                <configuration>
                    <descriptors>
                        <descriptor>
                            src/main/assembly/im.xml
                        </descriptor>
                        <descriptor>
                            src/main/assembly/elan4annex.xml
                        </descriptor>
                        <descriptor>
                            src/main/assembly/recognizer.xml
                        </descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>im-assembly</id>
                        <phase>package</phase><!-- bind to the package phase -->
                        <goals>
                            <goal>single</goal><!-- only goal that is not deprecated -->
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- A plugin to copy all required jars to the target/lib/ subdirectory.
                 (run "mvn package")
              -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <includeScope>compile</includeScope>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-extras</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <includeArtifactIds>gim,CJKV,IPA</includeArtifactIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            			<!-- 
			Generate Javadoc documentation by running 
			mvn javadoc:javadoc
			 -->
			<plugin>
        		<groupId>org.apache.maven.plugins</groupId>
        		<artifactId>maven-javadoc-plugin</artifactId>
        		<version>3.4.0</version>        	  
        		<configuration>
          			<show>protected</show>
          			<nohelp>true</nohelp>
          			<quiet>true</quiet>
					<links>
						<link>https://docs.oracle.com/javase/18/docs/api</link>
					</links>
					<!-- 
					<subpackages>mpi.eudico.client.annotator</subpackages>
					-->
          			<excludePackageNames>
          			<!-- mpi.eudico.server -->
          				<!-- mpi.eudico.client -->
          			</excludePackageNames>
          			<!-- -->
          			<additionalOptions>
          				<additionalOption>-Xmaxerrs 10</additionalOption>
          				<additionalOption>-Xmaxwarns 10</additionalOption>
          			</additionalOptions> 
          			  <!-- -->     			
        		</configuration>
        	</plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.3.0</version>
				<executions>
					<execution>
						<id>checkstyle</id>
						<phase>site</phase>
						<goals>
							<goal>check</goal>
						</goals>
                <configuration>
                    <configLocation>google_checks.xml</configLocation>
                    <consoleOutput>true</consoleOutput>
                    <failsOnError>true</failsOnError>
                    <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
                </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>4.7.3.6</version>
                <configuration>
                    <effort>Max</effort>
                    <threshold>High</threshold>
                    <xmlOutput>true</xmlOutput>
                    <includeFilterFile>${spotbugs.include.filter.file}</includeFilterFile>
                    <failThreshold>High</failThreshold>
                </configuration>
                <executions>
                    <execution>
                       <phase>site</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.pitest</groupId>
                <artifactId>pitest-maven</artifactId>
                <version>1.14.2</version>
                <configuration>
                    <targetClasses>
                        <param>nl.mpi.recognizer.local.whisper.WhisperStandaloneRecognizer</param>
                        <param>nl.mpi.recognizer.local.whisper.transcriber.*</param>
                    </targetClasses>
                    <targetTests>
                        <param>nl.mpi.recognizer.local.whisper.*</param>
                    </targetTests>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-junit5-plugin</artifactId>
                        <version>1.2.0</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.3.0</version>

                <configuration>
                    <configLocation>google_checks.xml</configLocation>
                    <consoleOutput>true</consoleOutput>
                    <failsOnError>true</failsOnError>
                    <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
                </configuration>
            </plugin>
        </plugins>
    </reporting>

    <profiles>
        <!-- Windows native libraries -->
        <profile>
            <id>win</id>
            <activation>
                <os>
                    <family>Windows</family>
                </os>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>2.2</version>
                        <executions>
                            <execution>
                                <id>unpack-win</id>
                                <phase>${exec.phase}</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.jds</groupId>
                                            <artifactId>libDSPlayer</artifactId>
                                            <version>2.0</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.jmmf</groupId>
                                            <artifactId>libJMMFPlayer</artifactId>
                                            <version>2.3</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.jmmf</groupId>
                                            <artifactId>libJMMFFrameGrabber</artifactId>
                                            <version>2.2</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.jmmf</groupId>
                                            <artifactId>libJMMFAudioExtractor</artifactId>
                                            <version>2.3</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.jniutil.win</groupId>
                                            <artifactId>libJNIUtil</artifactId>
                                            <version>1.0</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.sendpraat.windows</groupId>
                                            <artifactId>libsendpraat</artifactId>
                                            <version>2.0</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- running the application, non-standard Maven plugin -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>exec</id>
                                <phase>${exec.phase}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
							</execution>
						</executions>
                        <configuration>
                            <executable>java</executable> <!-- java.home must resolve to a jre directory -->
                            <arguments>
                                <argument>-Xmx256m</argument>
                                <argument>-Dswing.aatext=true</argument>
                                <argument>-DJDSDebug=true</argument>
                                <argument>-DPreferredMediaFramework=JMMF</argument>
                                <argument>--add-opens</argument>
                                <argument>java.base/java.lang=ALL-UNNAMED</argument>
                                <argument>-Djava.library.path=${java.library.path};${project.build.directory}\${nativelib.dir}</argument>
                                <argument>-classpath</argument>
                                <classpath/>
                                <argument>mpi.eudico.client.annotator.ELAN</argument>
                            </arguments>
                            <workingDirectory>${project.build.directory}\classes</workingDirectory>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Mac OS X -->
        <profile>
            <id>mac</id>
            <activation>
                <os>
                    <family>mac</family>
                </os>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>2.2</version>
                        <executions>
                            <execution>
                                <id>unpack-mac</id>
                                <phase>${exec.phase}</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.sendpraat.mac</groupId>
                                            <artifactId>libsendpraat</artifactId>
                                            <version>1.1${mac-arch-qualifier}</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.avf</groupId>
                                            <artifactId>libAVFFrameGrabber</artifactId>
                                            <version>2.3${mac-arch-qualifier}</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.avf</groupId>
                                            <artifactId>libAVFAudioExtractor</artifactId>
                                            <version>1.2${mac-arch-qualifier}</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.avf</groupId>
                                            <artifactId>libAVFPlayer</artifactId>
                                            <version>2.3${mac-arch-qualifier}</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.jniutil.mac</groupId>
                                            <artifactId>libJNIUtil</artifactId>
                                            <version>1.0${mac-arch-qualifier}</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.media.mac</groupId>
                                            <artifactId>libFFAudioExtractor</artifactId>
                                            <version>1.2${mac-arch-qualifier}</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.media.mac</groupId>
                                            <artifactId>libFFmpeg</artifactId>
                                            <version>1.0${mac-arch-qualifier}</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- running the application, non-standard Maven plugin -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>exec</id>
                                <phase>${exec.phase}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
							</execution>
						</executions>
                        <configuration>
                            <executable>java</executable> <!-- or ${java.home}\bin\java, where java.home must resolve to a jre directory -->
                            <arguments>
                                <argument>-Xmx256m</argument>
                                <argument>-Xdock:name=ELAN ${project.version}</argument>
                                <!-- <argument>-DuseBufferedImage=true</argument> -->
                                <argument>-Dswing.aatext=true</argument>
                                <argument>-DPreferredMediaFramework=AVFN</argument>
                                <argument>--add-opens</argument>
                                <argument>java.base/java.lang=ALL-UNNAMED</argument>
                                <!-- <argument>-DLexanPluginDir=/Users/Shared/MPI/ELAN_LIB/Annotyzers</argument> -->
                                <argument>-Djava.library.path=${project.build.directory}/${nativelib.dir}</argument>
                                <argument>-classpath</argument>
                                <classpath/>
                                <argument>mpi.eudico.client.annotator.ELAN</argument>
                            </arguments>
                            <workingDirectory>${project.build.directory}/classes</workingDirectory>
                        </configuration>
                    </plugin>

                </plugins>
            </build>
        </profile>
        <!-- Linux -->
        <profile>
            <id>linux</id>
            <activation>
                <os>
                    <family>unix</family>
                    <name>linux</name>
                </os>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>2.2</version>
                        <executions>
                            <execution>
                                <id>unpack-linux</id>
                                <phase>${exec.phase}</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.sendpraat.linux</groupId>
                                            <artifactId>libsendpraat</artifactId>
                                            <version>1.1</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.player.jniutil.linux</groupId>
                                            <artifactId>libJNIUtil</artifactId>
                                            <version>1.0</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.media.linux</groupId>
                                            <artifactId>libFFAudioExtractor</artifactId>
                                            <version>1.2</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>nl.mpi.media.linux</groupId>
                                            <artifactId>libFFmpeg</artifactId>
                                            <version>1.0</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/${nativelib.dir}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- running the application, non-standard Maven plugin -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>exec</id>
                                <phase>${exec.phase}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
							</execution>
						</executions>
                        <configuration>
                            <executable>java</executable> <!-- ${java.home}\bin\java, where java.home must resolve to a jre directory -->
                            <arguments>
                                <argument>-Xmx256m</argument>
                                <argument>-Dswing.aatext=true</argument>
                                <argument>-DPreferredMediaFramework=VLCJ</argument>
                                <argument>--add-opens</argument>
                                <argument>java.base/java.lang=ALL-UNNAMED</argument>
                                <argument>-Djava.library.path=${java.library.path};${project.build.directory}/${nativelib.dir}</argument>
                                <argument>-classpath</argument>
                                <classpath/>
                                <argument>mpi.eudico.client.annotator.ELAN</argument>
                            </arguments>
                            <workingDirectory>${project.build.directory}/classes</workingDirectory>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>source</id>
            <dependencies>
                <dependency>
                    <groupId>nl.mpi.player.jds</groupId>
                    <artifactId>libDSPlayer</artifactId>
                    <version>2.0</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.player.jmmf</groupId>
                    <artifactId>libJMMFPlayer</artifactId>
                    <version>2.3</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.player.jmmf</groupId>
                    <artifactId>libJMMFFrameGrabber</artifactId>
                    <version>2.2</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.player.jmmf</groupId>
                    <artifactId>libJMMFAudioExtractor</artifactId>
                    <version>2.3</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.player.jniutil.win</groupId>
                    <artifactId>libJNIUtil</artifactId>
                    <version>1.0</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.player.sendpraat.windows</groupId>
                    <artifactId>libsendpraat</artifactId>
                    <version>2.0</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.player.sendpraat.mac</groupId>
                    <artifactId>libsendpraat</artifactId>
                    <version>1.1${mac-arch-qualifier}</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.player.sendpraat.linux</groupId>
                    <artifactId>libsendpraat</artifactId>
                    <version>1.1</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.player.avf</groupId>
                    <artifactId>libAVFFrameGrabber</artifactId>
                    <version>2.3${mac-arch-qualifier}</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.player.avf</groupId>
                    <artifactId>libAVFPlayer</artifactId>
                    <version>2.3${mac-arch-qualifier}</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.player.avf</groupId>
                    <artifactId>libAVFAudioExtractor</artifactId>
                    <version>1.2${mac-arch-qualifier}</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.player.jniutil.mac</groupId>
                    <artifactId>libJNIUtil</artifactId>
                    <version>1.0${mac-arch-qualifier}</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.media.mac</groupId>
                    <artifactId>libFFAudioExtractor</artifactId>
                    <version>1.2${mac-arch-qualifier}</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.media.mac</groupId>
                    <artifactId>libFFmpeg</artifactId>
                    <version>1.0${mac-arch-qualifier}</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.media.linux</groupId>
                    <artifactId>libFFAudioExtractor</artifactId>
                    <version>1.2</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>nl.mpi.media.linux</groupId>
                    <artifactId>libFFmpeg</artifactId>
                    <version>1.0</version>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <!-- create a source distribution -->
                    <!-- default phase: post-integration-test -->
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>2.2.1</version>
                        <configuration>
                            <descriptors>
                                <descriptor>
                                    src/main/assembly/project.xml
                                </descriptor>
                            </descriptors>
                        </configuration>
                        <executions>
                            <execution>
                                <id>src-assembly</id>
                                <phase>test</phase><!-- bind to the test phase -->
                                <goals>
                                    <goal>single</goal><!-- only goal that is not deprecated -->
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <repositories>
        <repository>
            <id>gitlab-gwdg-maven</id>
            <url>https://gitlab.gwdg.de/api/v4/projects/20441/packages/maven</url>
            <!-- or use group ID of MPIPL_Repo
            <url>https://gitlab.gwdg.de/api/v4/projects/10553/-/packages/maven</url>
            -->
        </repository>
    </repositories>
    <distributionManagement>
        <repository>
            <id>gitlab-gwdg-maven</id>
            <url>https://gitlab.gwdg.de/api/v4/projects/20441/packages/maven</url>
            <!-- or use group ID of MPIPL_Repo
            <url>https://gitlab.gwdg.de/api/v4/projects/10553/-/packages/maven</url>
            -->
        </repository>
        <snapshotRepository>
            <id>gitlab-gwdg-maven</id>
            <url>https://gitlab.gwdg.de/api/v4/projects/20441/packages/maven</url>
        </snapshotRepository>
    </distributionManagement>
</project><!-- vim: set ts=4: -->
